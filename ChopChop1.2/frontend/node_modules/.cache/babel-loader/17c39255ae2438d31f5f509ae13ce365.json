{"ast":null,"code":"import _classCallCheck from \"/Users/leeweiheng/Documents/NUS Modules/Orbital2020/ChopChop/ChopChop1.2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leeweiheng/Documents/NUS Modules/Orbital2020/ChopChop/ChopChop1.2/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leeweiheng/Documents/NUS Modules/Orbital2020/ChopChop/ChopChop1.2/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leeweiheng/Documents/NUS Modules/Orbital2020/ChopChop/ChopChop1.2/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leeweiheng/Documents/NUS Modules/Orbital2020/ChopChop/ChopChop1.2/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leeweiheng/Documents/NUS Modules/Orbital2020/ChopChop/ChopChop1.2/frontend/src/PlaceGenerator/containers/MapContainer.js\";\nimport React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport MapAutoComplete from \"../components/MapAutoComplete\";\nimport MapMarker from \"../components/MapMarker\";\nimport PlaceCard from \"../components/PlaceCard\";\nimport ConstraintSlider from \"../components/ConstraintSlider\"; //import \"../App.css\";\n\nimport { Button, Input, Divider, message } from \"antd\";\nimport App from \"../App2\";\nvar styles = {\n  Positioner: {\n    paddingTop: \"200px\"\n  }\n};\nvar SG_COOR = {\n  lat: 1.3521,\n  lng: 103.8198\n};\n\nvar MapsContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapsContainer, _Component);\n\n  function MapsContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MapsContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapsContainer).call(this, props));\n\n    _this.updateConstraintName = function (event, key) {\n      event.preventDefault();\n      var prevConstraints = _this.state.constraints;\n      var constraints = Object.assign([], prevConstraints);\n      constraints[key].name = event.target.value;\n\n      _this.setState({\n        constraints: constraints\n      });\n    };\n\n    _this.updateConstraintTime = function (key, value) {\n      var prevConstraints = _this.state.constraints;\n      var constraints = Object.assign([], prevConstraints);\n      constraints[key].time = value;\n\n      _this.setState({\n        constraints: constraints\n      });\n    };\n\n    _this.addMarker = function (lat, lng, name) {\n      var prevMarkers = _this.state.markers;\n      var markers = Object.assign([], prevMarkers); // If name already exists in marker list just replace lat & lng.\n\n      var newMarker = true;\n\n      for (var i = 0; i < markers.length; i++) {\n        if (markers[i].name === name) {\n          newMarker = false;\n          markers[i].lat = lat;\n          markers[i].lng = lng;\n          message.success(\"Updated \\\"\".concat(name, \"\\\" Marker\"));\n          break;\n        }\n      } // Name does not exist in marker list. Create new marker\n\n\n      if (newMarker) {\n        markers.push({\n          lat: lat,\n          lng: lng,\n          name: name\n        });\n        message.success(\"Added new \\\"\".concat(name, \"\\\" Marker\"));\n      }\n\n      _this.setState({\n        markers: markers\n      });\n    };\n\n    _this.apiHasLoaded = function (map, mapsApi) {\n      _this.setState({\n        mapsLoaded: true,\n        map: map,\n        mapsApi: mapsApi,\n        singaporeLatLng: new mapsApi.LatLng(SG_COOR.lat, SG_COOR.lng),\n        autoCompleteService: new mapsApi.places.AutocompleteService(),\n        placesService: new mapsApi.places.PlacesService(map),\n        geoCoderService: new mapsApi.Geocoder(),\n        directionService: new mapsApi.DirectionsService()\n      });\n    };\n\n    _this.handleSearch = function () {\n      var _this$state = _this.state,\n          markers = _this$state.markers,\n          constraints = _this$state.constraints,\n          placesService = _this$state.placesService,\n          directionService = _this$state.directionService,\n          mapsApi = _this$state.mapsApi; //if (markers.length === 0) {\n      //  message.warn(\"Add a constraint and try again!\");\n      //  return;\n      // }\n\n      var filteredResults = [];\n      var marker = markers[0];\n      var timeLimit = constraints[0].time;\n      var latitude = _this.state.currentLocation.lat;\n      var longitude = _this.state.currentLocation.lng;\n      var markerLatLng = new mapsApi.LatLng(latitude, longitude);\n      var forms = document.forms;\n      var catForm = forms[\"test\"];\n      var category = catForm.querySelector('input[type = \"text\"]').value;\n      var placesRequest = {\n        location: markerLatLng,\n        // radius: '30000', // Cannot be used with rankBy. Pick your poison!\n        //type: [category], // List of types: https://developers.google.com/places/supported_types\n        query: category,\n        rankBy: mapsApi.places.RankBy.DISTANCE // Cannot be used with radius.\n\n      }; // First, search for ice cream shops.\n\n      placesService.textSearch(placesRequest, function (response) {\n        // Only look at the nearest top 5.\n        var responseLimit = Math.min(5, response.length);\n\n        var _loop = function _loop(i) {\n          var placeCoords = {\n            lat: response[i].geometry.location.lat,\n            lng: response[i].geometry.location.lng\n          };\n          console.log(placeCoords);\n          var prevList = _this.state.listOfCoords;\n          prevList.push(placeCoords);\n\n          _this.setState({\n            listOfCoords: prevList\n          });\n\n          var iceCreamPlace = response[i];\n          var rating = iceCreamPlace.rating,\n              name = iceCreamPlace.name;\n          var address = iceCreamPlace.formatted_address; // e.g 80 mandai Lake Rd,\n\n          var priceLevel = iceCreamPlace.price_level; // 1, 2, 3...\n\n          var photoUrl = \"\";\n          var openNow = false;\n\n          if (iceCreamPlace.opening_hours) {\n            openNow = iceCreamPlace.opening_hours.open_now; // e.g true/false\n          }\n\n          if (iceCreamPlace.photos && iceCreamPlace.photos.length > 0) {\n            photoUrl = iceCreamPlace.photos[0].getUrl();\n          } // Second, For each iceCreamPlace, check if it is within acceptable travelling distance\n\n\n          var directionRequest = {\n            origin: markerLatLng,\n            destination: address,\n            // Address of ice cream place\n            travelMode: \"DRIVING\"\n          };\n          directionService.route(directionRequest, function (result, status) {\n            if (status !== \"OK\") {\n              return;\n            }\n\n            var travellingRoute = result.routes[0].legs[0]; // { duration: { text: 1mins, value: 600 } }\n\n            var travellingTimeInMinutes = travellingRoute.duration.value / 60;\n\n            if (travellingTimeInMinutes < timeLimit) {\n              var distanceText = travellingRoute.distance.text; // 6.4km\n\n              var timeText = travellingRoute.duration.text; // 11 mins\n\n              filteredResults.push({\n                name: name,\n                rating: rating,\n                address: address,\n                openNow: openNow,\n                priceLevel: priceLevel,\n                photoUrl: photoUrl,\n                distanceText: distanceText,\n                timeText: timeText\n              });\n            } // Finally, Add results to state\n\n\n            _this.setState({\n              searchResults: filteredResults\n            });\n          });\n        };\n\n        for (var i = 0; i < responseLimit; i++) {\n          _loop(i);\n        }\n      });\n    };\n\n    _this.fun1 = function (position) {\n      _this.setState({\n        currentLocation: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      });\n\n      console.log(\"Latitude is :\", position.coords.latitude);\n      console.log(\"Longitude is :\", position.coords.longitude);\n    };\n\n    _this.componentDidMount = function () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(_this.fun1, function (error) {\n          console.error(\"Error code = \" + error.code + \" - \" + error.message);\n        });\n      }\n    };\n\n    _this.state = {\n      constraints: [{\n        name: \"\",\n        time: 0\n      }],\n      searchResults: [],\n      mapsLoaded: false,\n      markers: [],\n      map: {},\n      mapsApi: {},\n      singaporeLatLng: {},\n      autoCompleteService: {},\n      placesService: {},\n      geoCoderService: {},\n      directionService: {},\n      currentLocation: {\n        lat: 1.3521,\n        lng: 103.8198\n      },\n      listOfCoords: []\n    };\n    return _this;\n  } // Update name for constraint with index === key\n\n\n  _createClass(MapsContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          constraints = _this$state2.constraints,\n          mapsLoaded = _this$state2.mapsLoaded,\n          singaporeLatLng = _this$state2.singaporeLatLng,\n          markers = _this$state2.markers,\n          searchResults = _this$state2.searchResults,\n          listOfCoords = _this$state2.listOfCoords;\n      var _this$state3 = this.state,\n          autoCompleteService = _this$state3.autoCompleteService,\n          geoCoderService = _this$state3.geoCoderService; // Google Maps Services\n\n      return React.createElement(\"div\", {\n        className: \"w-100 d-flex py-4 flex-wrap justify-content-center\",\n        style: styles.Positioner,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"w-100 fw-md\",\n        styles: styles.Positioner,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"Find something to do!\"), React.createElement(\"section\", {\n        className: \"col-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, mapsLoaded ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, constraints.map(function (constraint, key) {\n        var name = constraint.name,\n            time = constraint.time;\n        return React.createElement(\"div\", {\n          key: key,\n          className: \"mb-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"d-flex mb-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          id: \"test\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"text\",\n          placeholder: \"Category\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }))), React.createElement(ConstraintSlider, {\n          iconType: \"car\",\n          value: time,\n          onChange: function onChange(value) {\n            return _this2.updateConstraintTime(key, value);\n          },\n          text: \"Minutes away by car\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }), React.createElement(Button, {\n          className: \"mt-4 fw-md\",\n          type: \"primary\",\n          size: \"large\",\n          onClick: _this2.handleSearch,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250\n          },\n          __self: this\n        }, \"Search!\"), React.createElement(Divider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }));\n      })) : null), React.createElement(\"section\", {\n        className: \"col-8 h-lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: \"AIzaSyBQlZDHkXFuTFhDdgn8T286dkWQije7d80\",\n          libraries: [\"places\", \"directions\"]\n        },\n        defaultZoom: 14,\n        defaultCenter: {\n          lat: this.state.currentLocation.lat,\n          lng: this.state.currentLocation.lng\n        },\n        yesIWantToUseGoogleMapApiInternals: true,\n        onGoogleApiLoaded: function onGoogleApiLoaded(_ref) {\n          var map = _ref.map,\n              maps = _ref.maps;\n          return _this2.apiHasLoaded(map, maps);\n        } // \"maps\" is the mapApi. Bad naming but that's their library.\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(MapMarker, {\n        name: \"current location\",\n        lat: this.state.currentLocation.lat,\n        lng: this.state.currentLocation.lng,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }))), searchResults.length > 0 ? React.createElement(React.Fragment, null, React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }), React.createElement(\"section\", {\n        className: \"col-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"d-flex flex-column justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"mb-4 fw-md\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, \"Heres what we found...\"), React.createElement(\"div\", {\n        className: \"d-flex flex-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, searchResults.map(function (result, key) {\n        return React.createElement(PlaceCard, {\n          info: result,\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298\n          },\n          __self: this\n        });\n      }))))) : null);\n    }\n  }]);\n\n  return MapsContainer;\n}(Component);\n\nexport default MapsContainer;\n/*\n\n<Input\n                        className=\"col-4 mr-2\"\n                        placeholder=\"Name\"\n                        onChange={(event) =>\n                          this.updateConstraintName(event, key)\n                        }\n                      />\n\n<MapAutoComplete\n                        autoCompleteService={autoCompleteService}\n                        geoCoderService={geoCoderService}\n                        singaporeLatLng={singaporeLatLng}\n                        markerName={name}\n                        addMarker={this.addMarker}\n                      />\n\n\n                      {Pin markers on the Map}\n            {markers.map((marker, key) => {\n              const { name, lat, lng } = marker;\n              return <MapMarker key={key} name={name} lat={lat} lng={lng} />;\n            })}\n\n            {listOfCoords.map((coords) => {\n              return <MapMarker name=\"\" lat={coords.lat} lng={coords.lng} />;\n            })}\n*/","map":{"version":3,"sources":["/Users/leeweiheng/Documents/NUS Modules/Orbital2020/ChopChop/ChopChop1.2/frontend/src/PlaceGenerator/containers/MapContainer.js"],"names":["React","Component","GoogleMapReact","MapAutoComplete","MapMarker","PlaceCard","ConstraintSlider","Button","Input","Divider","message","App","styles","Positioner","paddingTop","SG_COOR","lat","lng","MapsContainer","props","updateConstraintName","event","key","preventDefault","prevConstraints","state","constraints","Object","assign","name","target","value","setState","updateConstraintTime","time","addMarker","prevMarkers","markers","newMarker","i","length","success","push","apiHasLoaded","map","mapsApi","mapsLoaded","singaporeLatLng","LatLng","autoCompleteService","places","AutocompleteService","placesService","PlacesService","geoCoderService","Geocoder","directionService","DirectionsService","handleSearch","filteredResults","marker","timeLimit","latitude","currentLocation","longitude","markerLatLng","forms","document","catForm","category","querySelector","placesRequest","location","query","rankBy","RankBy","DISTANCE","textSearch","response","responseLimit","Math","min","placeCoords","geometry","console","log","prevList","listOfCoords","iceCreamPlace","rating","address","formatted_address","priceLevel","price_level","photoUrl","openNow","opening_hours","open_now","photos","getUrl","directionRequest","origin","destination","travelMode","route","result","status","travellingRoute","routes","legs","travellingTimeInMinutes","duration","distanceText","distance","text","timeText","searchResults","fun1","position","coords","componentDidMount","navigator","geolocation","getCurrentPosition","error","code","constraint","libraries","maps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport MapAutoComplete from \"../components/MapAutoComplete\";\nimport MapMarker from \"../components/MapMarker\";\nimport PlaceCard from \"../components/PlaceCard\";\nimport ConstraintSlider from \"../components/ConstraintSlider\";\n//import \"../App.css\";\n\nimport { Button, Input, Divider, message } from \"antd\";\nimport App from \"../App2\";\n\nconst styles = {\n  Positioner: {\n    paddingTop: \"200px\"\n  }\n}\n\nconst SG_COOR = { lat: 1.3521, lng: 103.8198 };\n\nclass MapsContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      constraints: [{ name: \"\", time: 0 }],\n      searchResults: [],\n      mapsLoaded: false,\n      markers: [],\n      map: {},\n      mapsApi: {},\n      singaporeLatLng: {},\n      autoCompleteService: {},\n      placesService: {},\n      geoCoderService: {},\n      directionService: {},\n      currentLocation: {\n        lat: 1.3521,\n        lng: 103.8198,\n      },\n      listOfCoords: [],\n    };\n  }\n\n  // Update name for constraint with index === key\n  updateConstraintName = (event, key) => {\n    event.preventDefault();\n    const prevConstraints = this.state.constraints;\n    const constraints = Object.assign([], prevConstraints);\n    constraints[key].name = event.target.value;\n    this.setState({ constraints });\n  };\n\n  // Updates distance (in KM) for constraint with index == key\n  updateConstraintTime = (key, value) => {\n    const prevConstraints = this.state.constraints;\n    const constraints = Object.assign([], prevConstraints);\n    constraints[key].time = value;\n    this.setState({ constraints });\n  };\n\n  // Adds a Marker to the GoogleMaps component\n  addMarker = (lat, lng, name) => {\n    const prevMarkers = this.state.markers;\n    const markers = Object.assign([], prevMarkers);\n\n    // If name already exists in marker list just replace lat & lng.\n    let newMarker = true;\n    for (let i = 0; i < markers.length; i++) {\n      if (markers[i].name === name) {\n        newMarker = false;\n        markers[i].lat = lat;\n        markers[i].lng = lng;\n        message.success(`Updated \"${name}\" Marker`);\n        break;\n      }\n    }\n    // Name does not exist in marker list. Create new marker\n    if (newMarker) {\n      markers.push({ lat, lng, name });\n      message.success(`Added new \"${name}\" Marker`);\n    }\n\n    this.setState({ markers });\n  };\n\n  // Runs once when the Google Maps library is ready\n  // Initializes all services that we need\n  apiHasLoaded = (map, mapsApi) => {\n    this.setState({\n      mapsLoaded: true,\n      map,\n      mapsApi,\n      singaporeLatLng: new mapsApi.LatLng(SG_COOR.lat, SG_COOR.lng),\n      autoCompleteService: new mapsApi.places.AutocompleteService(),\n      placesService: new mapsApi.places.PlacesService(map),\n      geoCoderService: new mapsApi.Geocoder(),\n      directionService: new mapsApi.DirectionsService(),\n    });\n  };\n\n  // With the constraints, find some places serving ice-cream\n  handleSearch = () => {\n    const {\n      markers,\n      constraints,\n      placesService,\n      directionService,\n      mapsApi,\n    } = this.state;\n    //if (markers.length === 0) {\n    //  message.warn(\"Add a constraint and try again!\");\n    //  return;\n    // }\n    const filteredResults = [];\n    const marker = markers[0];\n    const timeLimit = constraints[0].time;\n    const latitude = this.state.currentLocation.lat;\n    const longitude = this.state.currentLocation.lng;\n    const markerLatLng = new mapsApi.LatLng(latitude, longitude);\n    const forms = document.forms;\n    const catForm = forms[\"test\"];\n    const category = catForm.querySelector('input[type = \"text\"]').value;\n\n    const placesRequest = {\n      location: markerLatLng,\n      // radius: '30000', // Cannot be used with rankBy. Pick your poison!\n      //type: [category], // List of types: https://developers.google.com/places/supported_types\n      query: category,\n      rankBy: mapsApi.places.RankBy.DISTANCE, // Cannot be used with radius.\n    };\n\n    // First, search for ice cream shops.\n    placesService.textSearch(placesRequest, (response) => {\n      // Only look at the nearest top 5.\n      const responseLimit = Math.min(5, response.length);\n      for (let i = 0; i < responseLimit; i++) {\n        const placeCoords = {\n          lat: response[i].geometry.location.lat,\n          lng: response[i].geometry.location.lng,\n        };\n        console.log(placeCoords);\n        const prevList = this.state.listOfCoords;\n        prevList.push(placeCoords);\n        this.setState({\n          listOfCoords: prevList,\n        });\n\n        const iceCreamPlace = response[i];\n        const { rating, name } = iceCreamPlace;\n        const address = iceCreamPlace.formatted_address; // e.g 80 mandai Lake Rd,\n        const priceLevel = iceCreamPlace.price_level; // 1, 2, 3...\n        let photoUrl = \"\";\n        let openNow = false;\n        if (iceCreamPlace.opening_hours) {\n          openNow = iceCreamPlace.opening_hours.open_now; // e.g true/false\n        }\n        if (iceCreamPlace.photos && iceCreamPlace.photos.length > 0) {\n          photoUrl = iceCreamPlace.photos[0].getUrl();\n        }\n\n        // Second, For each iceCreamPlace, check if it is within acceptable travelling distance\n        const directionRequest = {\n          origin: markerLatLng,\n          destination: address, // Address of ice cream place\n          travelMode: \"DRIVING\",\n        };\n        directionService.route(directionRequest, (result, status) => {\n          if (status !== \"OK\") {\n            return;\n          }\n          const travellingRoute = result.routes[0].legs[0]; // { duration: { text: 1mins, value: 600 } }\n          const travellingTimeInMinutes = travellingRoute.duration.value / 60;\n          if (travellingTimeInMinutes < timeLimit) {\n            const distanceText = travellingRoute.distance.text; // 6.4km\n            const timeText = travellingRoute.duration.text; // 11 mins\n            filteredResults.push({\n              name,\n              rating,\n              address,\n              openNow,\n              priceLevel,\n              photoUrl,\n              distanceText,\n              timeText,\n            });\n          }\n          // Finally, Add results to state\n          this.setState({ searchResults: filteredResults });\n        });\n      }\n    });\n  };\n\n  //sub function\n  fun1 = (position) => {\n    this.setState({\n      currentLocation: {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n      },\n    });\n    console.log(\"Latitude is :\", position.coords.latitude);\n    console.log(\"Longitude is :\", position.coords.longitude);\n  };\n\n  //get users location\n  componentDidMount = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.fun1, function(error) {\n        console.error(\"Error code = \" + error.code + \" - \" + error.message);\n      });\n    }\n  };\n\n  render() {\n    const {\n      constraints,\n      mapsLoaded,\n      singaporeLatLng,\n      markers,\n      searchResults,\n      listOfCoords,\n    } = this.state;\n    const { autoCompleteService, geoCoderService } = this.state; // Google Maps Services\n    return (\n      <div className=\"w-100 d-flex py-4 flex-wrap justify-content-center\" style={styles.Positioner}>\n        <h1 className=\"w-100 fw-md\" styles={styles.Positioner}>Find something to do!</h1>\n        {/* Constraints section */}\n\n        <section className=\"col-4\">\n          {mapsLoaded ? (\n            <div>\n              {constraints.map((constraint, key) => {\n                const { name, time } = constraint;\n                return (\n                  <div key={key} className=\"mb-4\">\n                    <div className=\"d-flex mb-2\">\n                      <form id=\"test\">\n                        <Input type=\"text\" placeholder=\"Category\" />\n                      </form>\n                    </div>\n                    <ConstraintSlider\n                      iconType=\"car\"\n                      value={time}\n                      onChange={(value) =>\n                        this.updateConstraintTime(key, value)\n                      }\n                      text=\"Minutes away by car\"\n                    />\n                    {/* Search Button */}\n                    <Button\n                      className=\"mt-4 fw-md\"\n                      type=\"primary\"\n                      size=\"large\"\n                      onClick={this.handleSearch}\n                    >\n                      Search!\n                    </Button>\n                    <Divider />\n                  </div>\n                );\n              })}\n            </div>\n          ) : null}\n        </section>\n\n        {/* Maps Section */}\n        <section className=\"col-8 h-lg\">\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: \"AIzaSyBQlZDHkXFuTFhDdgn8T286dkWQije7d80\",\n              libraries: [\"places\", \"directions\"],\n            }}\n            defaultZoom={14}\n            defaultCenter={{\n              lat: this.state.currentLocation.lat,\n              lng: this.state.currentLocation.lng,\n            }}\n            yesIWantToUseGoogleMapApiInternals={true}\n            onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)} // \"maps\" is the mapApi. Bad naming but that's their library.\n          >\n            <MapMarker\n              name=\"current location\"\n              lat={this.state.currentLocation.lat}\n              lng={this.state.currentLocation.lng}\n            />\n          </GoogleMapReact>\n        </section>\n\n        {/* Results section */}\n        {searchResults.length > 0 ? (\n          <>\n            <Divider />\n            <section className=\"col-12\">\n              <div className=\"d-flex flex-column justify-content-center\">\n                <h1 className=\"mb-4 fw-md\">Heres what we found...</h1>\n                <div className=\"d-flex flex-wrap\">\n                  {searchResults.map((result, key) => (\n                    <PlaceCard info={result} key={key} />\n                  ))}\n                </div>\n              </div>\n            </section>\n          </>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default MapsContainer;\n\n/*\n\n<Input\n                        className=\"col-4 mr-2\"\n                        placeholder=\"Name\"\n                        onChange={(event) =>\n                          this.updateConstraintName(event, key)\n                        }\n                      />\n\n<MapAutoComplete\n                        autoCompleteService={autoCompleteService}\n                        geoCoderService={geoCoderService}\n                        singaporeLatLng={singaporeLatLng}\n                        markerName={name}\n                        addMarker={this.addMarker}\n                      />\n\n\n                      {Pin markers on the Map}\n            {markers.map((marker, key) => {\n              const { name, lat, lng } = marker;\n              return <MapMarker key={key} name={name} lat={lat} lng={lng} />;\n            })}\n\n            {listOfCoords.map((coords) => {\n              return <MapMarker name=\"\" lat={coords.lat} lng={coords.lng} />;\n            })}\n*/\n"]},"metadata":{},"sourceType":"module"}